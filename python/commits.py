"""Урок по commits."""

# 1. Опишите своими словами назначение каждого из этих типов коммитов:
# feat, fix, docs, style, refactor, test, build, ci, perf, chore.
#
# коммит типа feat добавляет новую функцию в ваш код
# Коммит типа fix исправляет баг в вашем коде.
# Коммит типа docs вносит изменения в документацию проекта.
# Коммит типа style изменяет форматирование или стиль кода, не влияя на его логику.
# Коммит типа refactor улучшает структуру кода без добавления новых функций или исправления багов.
# Коммит типа test добавляет или изменяет тесты для вашего кода.
# Коммит типа build вносит изменения в систему сборки или зависимости проекта.
# Коммит типа ci изменяет настройки CI/CD (непрерывной интеграции и доставки).
# Коммит типа perf оптимизирует производительность вашего кода.
# Коммит типа chore выполняет вспомогательные задачи, не связанные напрямую с кодом (например, обновление зависимостей или настройка инструментов).
#
# 2. Представьте, что вы исправили баг в функции, которая некорректно округляет числа. Сделайте фиктивный коммит и напишите для него сообщение в соответствии с Conventional Commits (используя тип fix).
#
# Фиктивный коммит (или "пустой" коммит) — это коммит, который не вносит изменений в код или файлы проекта. Он создается исключительно для того, чтобы запустить определенные процессы
#
# git commit -m "fix: fixed number rounding function"
#
# git commit — это команда, которая фиксирует изменения в репозитории(используется для создания нового коммита с указанным сообщением).
#
# Опция -m позволяет сразу указать сообщение коммита в командной строке, без необходимости открывать текстовый редактор.
#
# 3. Добавление новой функциональности:
# Допустим, вы реализовали новую функцию generateReport в проекте. Сделайте фиктивный коммит с типом feat, отражающий добавление этой функциональности
#
# git commit -m "feat: added function generateReport"
#
# 4. Модификация формата кода или стилей:
# Представьте, что вы поправили отступы и форматирование во всём проекте, не меняя логики кода. Сделайте фиктивный коммит с типом style
#
# git commit -m "style: исправлены отступы и форматирование кода"
#
#  Документация и тестирование:
# 5. Сделайте фиктивный коммит с типом docs, добавляющий или улучшающий документацию для вашей новой функции.
#
# git commit --allow-empty -m "docs: added docs for new function calculateRound"
#
# --allow-empty необходим в случае, если коммит будет пустым(фиктивным)
#
# 6. Сделайте фиктивный коммит с типом test, добавляющий тесты для этой же функции.
# git commit --allow-empty -m "test: added tests for function generateReport"
#
#
#
#
#
#
#
#
# Staging Area (или индекс) — это важная концепция в Git, которая представляет собой промежуточную область между вашей рабочей директорией (working directory) и историей коммитов (repository). Она позволяет вам точно контролировать, какие изменения будут включены в следующий коммит.
#
# Как это работает:
# Working Directory (Рабочая директория):
#
#     Это текущее состояние файлов в вашем проекте, включая все изменения, которые вы внесли (новые файлы, изменённые файлы, удалённые файлы).
#
#     Git отслеживает изменения в рабочей директории, но они ещё не готовы для коммита.
#
# Staging Area (Индекс):
#
#     Это промежуточная область, куда вы добавляете изменения, которые хотите включить в следующий коммит.
#
#     Вы можете добавлять только определённые файлы или даже части файлов (с помощью git add -p).
#
#     Staging Area позволяет вам "подготовить" изменения перед тем, как зафиксировать их в истории.
#
# Repository (Репозиторий):
#
#     После того как изменения добавлены в Staging Area, вы можете создать коммит с помощью git commit.
#
#     Коммит сохраняет изменения из Staging Area в историю репозитория.
#
# Пример использования Staging Area:
# Вы внесли изменения в несколько файлов:
#
# # Изменения в файлах
# file1.txt
# file2.txt
# file3.txt
# Вы хотите закоммитить только изменения в file1.txt и file2.txt, но не в file3.txt. Для этого вы добавляете нужные файлы в Staging Area:
#
# git add file1.txt file2.txt
# Проверяете состояние Staging Area с помощью git status:
#
# git status
# Вы увидите, что file1.txt и file2.txt готовы к коммиту, а file3.txt — нет.
#
# Создаёте коммит:
#
# git commit -m "Добавлены изменения в file1.txt и file2.txt"
# Теперь изменения из Staging Area сохранены в истории репозитория, а file3.txt остаётся в рабочей директории без коммита.
#
# Преимущества Staging Area:
# Гибкость: Вы можете выбирать, какие изменения включать в коммит.
# Контроль: Вы можете разбивать изменения на логические части и коммитить их по отдельности.
# Безопасность: Вы можете проверить изменения перед тем, как зафиксировать их в истории.
#
# Основные команды для работы с Staging Area:
# git add <file> — добавить файл в Staging Area.
# git add . — добавить все изменения в рабочей директории в Staging Area.
# git reset <file> — убрать файл из Staging Area (но изменения останутся в рабочей директории).
# git status — посмотреть, какие файлы находятся в Staging Area, а какие нет.
#
# Staging Area — это мощный инструмент, который помогает вам управлять изменениями и создавать чистую и понятную историю коммитов.
