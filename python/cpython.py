"""Урок по cpython."""

# #### Введение в Python и CPython
#
# 1. Что такое CPython и чем он отличается от Python?
# Cpython - интерпритатор, а Python - язык программирования
#
# 3. Сколько существует реализаций Python, и какая из них самая популярная?
# На сегодня существует более 10 реализаций Python, Cpython - самая популярная
#
# 4. На каком языке написан CPython?
# С + Python
#
# #### Поиск и установка CPython
#
# 5. (опционально) Кто создал CPython?
# CPython создал Гвидо ван Россум (Guido van Rossum) — нидерландский программист, разработавший сам язык Python и его первую реализацию (CPython).
#
# 6. Почему Python считается быстрым, несмотря на то, что это интерпретируемый язык?
# т к С быстрый язык программирования
#
# 7. Напишите путь к Интерпретатору CPython на вашем компьютере
# C:\Users\cherk\AppData\Local\Programs\Python\Python310\python.exe
#
# #### Структура CPython
#
# 8. Что содержится в папке include в CPython?
# Папка include в CPython содержит заголовочные файлы (.h), необходимые для работы с Python на уровне C. Эти файлы используются:
# Для компиляции C-расширений (например, модулей типа numpy).
# Для встраивания Python в другие приложения (например, C/C++ программы).
#
# 9. Где можно найти исходный код CPython дайте ссылку на репозиторий гитхаб
# https://github.com/python/cpython
#
# 10. (опционально) Как работает интерпретатор CPython при выполнении кода?
#
# Построчное считывание кода
# Парсинг (разбор синтаксиса)
# Компиляция в байт-кода
# Исполнение байт-кода
# Работа с объектами
#
#
# #### Запуск файла с помощью CPython
#
# 11. Какая команда используется для запуска файла с помощью CPython?
#
# python файл.py
#
# 12. Можно ли запускать текстовые файлы через интерпретатор Python? Почему?
#
# можно
# Почему это работает:
# Python — это интерпретируемый язык, поэтому он анализирует смысл команд, а не расширение файла.
# Если содержимое можно разобрать как Python-код (даже в .txt), он выполнится.
# Для не-Python-файлов нужны специальные методы (парсеры JSON, CSV и т.д.).
#
# 13. Как указать путь к интерпретатору и файлу для выполнения кода?
# находим в проводнике папку, где лежит python.exe и файл с кодом
#
# ### Введение в PyPy
#
# 14. Чем PyPy отличается от CPython?
#
# Cpython - интерпритатор, а Python - язык программирования
#
# 15. Почему PyPy не может использоваться для всех проектов на Python?
#
# Многие популярные библиотеки (numpy, pandas, tensorflow) используют нативные C-модули, которые оптимизированы под CPython. PyPy не всегда корректно работает с ними из-за различий в API.
#
# 16. Где можно скачать PyPy?
#
# pypy.org
#
#
# #### Установка и запуск PyPy
#
# 17. Как установить PyPy после скачивания?
#
# разархивировать зипку и найти pypy.exe
#
# 18. Как запустить файл с помощью PyPy?
#
# pypy3 ваш_файл.py
#
# 19. Почему PyPy выполняет код быстрее, чем CPython?
#
# PyPy ускоряет выполнение Python-кода благодаря JIT-компиляции (Just-In-Time) и оптимизациям на лету. Вот ключевые причины его преимущества в скорости
#
# ### Практические задания
# #### Задание 1: Поиск и установка CPython
#
# Проверьте, установлен ли CPython на вашем компьютере:
#     Используйте поиск в меню "Пуск" (Windows) или терминале (Linux/Mac).
#     Введите команду python --version или python3 --version в терминале.
# Если CPython не установлен, скачайте его с официального сайта Python https://www.python.org/downloads/ и установите.
#
# #### Задание 2: Исследование структуры CPython
#
# Найдите папку, где установлен Python (например, через команду which python в терминале или свойства ярлыка).
# Откройте папку include и изучите её содержимое. Какое количество файлов на C там есть? 82
# Перейдите на [GitHub-репозиторий CPython](https://github.com/python/cpython) и найдите файл README. Прочитайте информацию о проекте.
#
# #### Задание 3: Запуск файла с помощью CPython
#
# Создайте текстовый файл example.txt с содержимым:
# print("Hello from CPython!")
#
# Запустите файл через команду python <путь_до_файла> (замените <путь_до_файла> на фактический путь к вашему файлу).
# Проверьте, что выводится на экран. Попробуйте изменить расширение файла на .py и повторите запуск.
#
# #### Задание 4: Установка и использование PyPy
#
# Перейдите на [официальный сайт PyPy](https://www.pypy.org/) и скачайте подходящую версию для вашей операционной системы.
# Распакуйте скачанный архив в удобное место.
# Создайте файл example_pypy.py с кодом:
# print("Hello from pypy!")
#
# Запустите файл через PyPy
# pypy <путь_до_файла> (замените <путь_до_файла> на фактический путь к вашему файлу).
# Проверьте, что выводится на экран. Попробуйте изменить расширение файла на .py и повторите запуск.
#
# #### Задание 5: Сравнение производительности CPython и PyPy
#
# Создайте файл performance_test.py с кодом:
#     import time
#     start_time = time.time()
#     total = 0
#     for i in range(1, 10000000):
#         total += i
#     end_time = time.time()
#
#     print("Result:", total)
#     print("Execution time:", end_time - start_time, "seconds")
# Запустите этот файл сначала через CPython, а затем через PyPy. Запишите результаты времени выполнения для обоих интерпретаторов.
# Сделайте вывод о разнице в производительности
#
# запуск с помощью pypy: Result: 49999995000000
# Execution time: 0.025283098220825195 seconds
#
# запуск с помощью Cpython: Result: 49999995000000
# Execution time: 0.6745193004608154 seconds
#
# PyPy быстрее Cpython
